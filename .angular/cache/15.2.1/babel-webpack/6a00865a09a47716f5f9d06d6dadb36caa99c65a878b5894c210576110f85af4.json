{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nlet QuestionComponent = class QuestionComponent {\n  constructor(questionService) {\n    this.questionService = questionService;\n    this.name = \"\";\n    this.questionList = [];\n    this.currentQuestion = 0;\n    this.points = 0;\n    this.counter = 60;\n    this.correctAnswer = 0;\n    this.inCorrectAnswer = 0;\n    this.progress = \"0\";\n    this.isQuizCompleted = false;\n  }\n  ngOnInit() {\n    this.name = localStorage.getItem(\"name\");\n    this.getAllQuestions();\n    this.startCounter();\n  }\n  getAllQuestions() {\n    this.questionService.getQuestionJson().subscribe(res => {\n      this.questionList = res.questions;\n    });\n  }\n  nextQuestion() {\n    this.currentQuestion++;\n  }\n  previousQuestion() {\n    this.currentQuestion--;\n  }\n  answer(currentQno, option) {\n    if (option.correct) {\n      this.points += 10;\n      this.correctAnswer++;\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.inCorrectAnswer++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n      this.points -= 10;\n    }\n  }\n  startCounter() {\n    this.interval$ = interval(1000).subscribe(val => {\n      this.counter--;\n      if (this.counter === 0) {\n        this.currentQuestion++;\n        this.counter = 60;\n        this.points -= 10;\n      }\n    });\n    setTimeout(() => {\n      this.interval$.unsubscribe();\n    }, 600000);\n  }\n  stopCounter() {\n    this.interval$.unsubscribe();\n    this.counter = 0;\n  }\n  resetCounter() {\n    this.stopCounter();\n    this.counter = 60;\n    this.startCounter();\n  }\n  resetQuiz() {\n    this.resetCounter();\n    this.getAllQuestions();\n    this.points = 0;\n    this.counter = 60;\n    this.currentQuestion = 0;\n    this.progress = \"0\";\n  }\n  getProgressPercent() {\n    this.progress = (this.currentQuestion / this.questionList.length * 100).toString();\n    return this.progress;\n  }\n};\nQuestionComponent = __decorate([Component({\n  selector: 'question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})], QuestionComponent);\nexport { QuestionComponent };","map":{"version":3,"mappings":"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","names":["Component","interval","QuestionComponent","constructor","questionService","ngOnInit","name","localStorage","getItem","getAllQuestions","startCounter","getQuestionJson","subscribe","res","questionList","questions","nextQuestion","currentQuestion","previousQuestion","answer","currentQno","option","correct","points","correctAnswer","setTimeout","resetCounter","getProgressPercent","inCorrectAnswer","interval$","val","counter","unsubscribe","stopCounter","resetQuiz","progress","length","toString","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\anisa\\Masaüstü\\Quiz\\Quiz\\src\\app\\components\\question\\question.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { QuestionService } from 'src/app/service/question.service';\n\n@Component({\n  selector: 'question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n\n  public name:string=\"\";\n  public questionList: any = [];\n  public currentQuestion:number = 0;\n  public points:number=0;\n  counter=60;\n  correctAnswer:number = 0;\n  inCorrectAnswer:number = 0; \n  interval$:any;\n  progress:string=\"0\";\nisQuizCompleted:boolean=false;\n  constructor(private questionService:QuestionService) { }\n\n  ngOnInit() {\n    this.name=localStorage.getItem(\"name\")!;\n    this.getAllQuestions();\n    this.startCounter();\n  }\n\n  getAllQuestions(){\n    this.questionService.getQuestionJson().subscribe(res=>{\n      this.questionList = res.questions;\n    })\n  }\n\n  nextQuestion(){\n    this.currentQuestion++;\n  }\n\n  previousQuestion(){\n    this.currentQuestion--;\n  }\n\n  answer(currentQno:number,option:any){\n    if(option.correct){\n      this.points+=10;\n      this.correctAnswer++;\n      setTimeout(()=>{\n        this.currentQuestion++;\n        this.resetCounter();\n        this.getProgressPercent();\n      },1000);\n      \n    }else{\n    setTimeout(()=>{\n      this.currentQuestion++;\n      this.inCorrectAnswer++;\n      this.resetCounter();\n      this.getProgressPercent();\n    },1000)      \n\n      this.points-=10;\n    }\n  }  \n  startCounter(){\n    this.interval$ = interval(1000)\n    .subscribe(val=>{\n      this.counter--;\n      if(this.counter===0){\n        this.currentQuestion++;\n        this.counter=60;\n        this.points-=10;\n      }\n    });\n    setTimeout(()=>{\n      this.interval$.unsubscribe();\n    },600000);\n  }\n  stopCounter(){\n    this.interval$.unsubscribe();\n    this.counter=0;\n  }\n  resetCounter(){\n    this.stopCounter();\n    this.counter=60;\n    this.startCounter();\n  }\n\n  resetQuiz(){\n    this.resetCounter();\n    this.getAllQuestions();\n    this.points=0;\n    this.counter=60;\n    this.currentQuestion=0;\n    this.progress=\"0\";\n  }\n\n  getProgressPercent(){\n    this.progress = ((this.currentQuestion/this.questionList.length)*100).toString();\n    return this.progress;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}